package com.wuzuqing.component_im.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wuzuqing.component_im.common.packets.ChatBody;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_BODY".
*/
public class ChatBodyDao extends AbstractDao<ChatBody, String> {

    public static final String TABLENAME = "CHAT_BODY";

    /**
     * Properties of entity ChatBody.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property From = new Property(2, String.class, "from", false, "FROM");
        public final static Property To = new Property(3, String.class, "to", false, "TO");
        public final static Property MsgType = new Property(4, Integer.class, "msgType", false, "MSG_TYPE");
        public final static Property ChatType = new Property(5, Integer.class, "chatType", false, "CHAT_TYPE");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Group_id = new Property(7, String.class, "group_id", false, "group_id");
        public final static Property SessionId = new Property(8, String.class, "sessionId", false, "SESSION_ID");
        public final static Property IsRead = new Property(9, Boolean.class, "isRead", false, "IS_READ");
        public final static Property IsListen = new Property(10, Boolean.class, "isListen", false, "IS_LISTEN");
        public final static Property Url = new Property(11, String.class, "url", false, "URL");
        public final static Property LocalPath = new Property(12, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Duration = new Property(13, int.class, "duration", false, "DURATION");
    }


    public ChatBodyDao(DaoConfig config) {
        super(config);
    }
    
    public ChatBodyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_BODY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"FROM\" TEXT," + // 2: from
                "\"TO\" TEXT," + // 3: to
                "\"MSG_TYPE\" INTEGER," + // 4: msgType
                "\"CHAT_TYPE\" INTEGER," + // 5: chatType
                "\"CONTENT\" TEXT," + // 6: content
                "\"group_id\" TEXT," + // 7: group_id
                "\"SESSION_ID\" TEXT," + // 8: sessionId
                "\"IS_READ\" INTEGER," + // 9: isRead
                "\"IS_LISTEN\" INTEGER," + // 10: isListen
                "\"URL\" TEXT," + // 11: url
                "\"LOCAL_PATH\" TEXT," + // 12: localPath
                "\"DURATION\" INTEGER NOT NULL );"); // 13: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_BODY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatBody entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(3, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(4, to);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(5, msgType);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(6, chatType);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(8, group_id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(9, sessionId);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(10, isRead ? 1L: 0L);
        }
 
        Boolean isListen = entity.getIsListen();
        if (isListen != null) {
            stmt.bindLong(11, isListen ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(12, url);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(13, localPath);
        }
        stmt.bindLong(14, entity.getDuration());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatBody entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(3, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(4, to);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(5, msgType);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(6, chatType);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(8, group_id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(9, sessionId);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(10, isRead ? 1L: 0L);
        }
 
        Boolean isListen = entity.getIsListen();
        if (isListen != null) {
            stmt.bindLong(11, isListen ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(12, url);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(13, localPath);
        }
        stmt.bindLong(14, entity.getDuration());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatBody readEntity(Cursor cursor, int offset) {
        ChatBody entity = new ChatBody( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // to
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // msgType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // chatType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // group_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sessionId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isRead
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isListen
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // url
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // localPath
            cursor.getInt(offset + 13) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatBody entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFrom(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChatType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroup_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSessionId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsRead(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsListen(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLocalPath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDuration(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatBody entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ChatBody entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatBody entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
