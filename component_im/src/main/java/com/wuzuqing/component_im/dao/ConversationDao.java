package com.wuzuqing.component_im.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wuzuqing.component_im.bean.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION".
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property ChatType = new Property(2, Integer.class, "chatType", false, "CHAT_TYPE");
        public final static Property SessionId = new Property(3, String.class, "sessionId", false, "SESSION_ID");
        public final static Property TargetId = new Property(4, Integer.class, "targetId", false, "TARGET_ID");
        public final static Property Nick = new Property(5, String.class, "nick", false, "NICK");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property IsTop = new Property(7, Boolean.class, "isTop", false, "IS_TOP");
        public final static Property IsDisturb = new Property(8, Boolean.class, "isDisturb", false, "IS_DISTURB");
        public final static Property LastMessageContent = new Property(9, String.class, "lastMessageContent", false, "LAST_MESSAGE_CONTENT");
        public final static Property LastMessageId = new Property(10, String.class, "lastMessageId", false, "LAST_MESSAGE_ID");
        public final static Property LastMessageCreateTime = new Property(11, Long.class, "lastMessageCreateTime", false, "LAST_MESSAGE_CREATE_TIME");
        public final static Property LastMessageNick = new Property(12, String.class, "lastMessageNick", false, "LAST_MESSAGE_NICK");
        public final static Property LastMsgType = new Property(13, Integer.class, "lastMsgType", false, "LAST_MSG_TYPE");
    }


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"CHAT_TYPE\" INTEGER," + // 2: chatType
                "\"SESSION_ID\" TEXT," + // 3: sessionId
                "\"TARGET_ID\" INTEGER," + // 4: targetId
                "\"NICK\" TEXT," + // 5: nick
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"IS_TOP\" INTEGER," + // 7: isTop
                "\"IS_DISTURB\" INTEGER," + // 8: isDisturb
                "\"LAST_MESSAGE_CONTENT\" TEXT," + // 9: lastMessageContent
                "\"LAST_MESSAGE_ID\" TEXT," + // 10: lastMessageId
                "\"LAST_MESSAGE_CREATE_TIME\" INTEGER," + // 11: lastMessageCreateTime
                "\"LAST_MESSAGE_NICK\" TEXT," + // 12: lastMessageNick
                "\"LAST_MSG_TYPE\" INTEGER);"); // 13: lastMsgType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(3, chatType);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(4, sessionId);
        }
 
        Integer targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(5, targetId);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(6, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        Boolean isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(8, isTop ? 1L: 0L);
        }
 
        Boolean isDisturb = entity.getIsDisturb();
        if (isDisturb != null) {
            stmt.bindLong(9, isDisturb ? 1L: 0L);
        }
 
        String lastMessageContent = entity.getLastMessageContent();
        if (lastMessageContent != null) {
            stmt.bindString(10, lastMessageContent);
        }
 
        String lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindString(11, lastMessageId);
        }
 
        Long lastMessageCreateTime = entity.getLastMessageCreateTime();
        if (lastMessageCreateTime != null) {
            stmt.bindLong(12, lastMessageCreateTime);
        }
 
        String lastMessageNick = entity.getLastMessageNick();
        if (lastMessageNick != null) {
            stmt.bindString(13, lastMessageNick);
        }
 
        Integer lastMsgType = entity.getLastMsgType();
        if (lastMsgType != null) {
            stmt.bindLong(14, lastMsgType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(3, chatType);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(4, sessionId);
        }
 
        Integer targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(5, targetId);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(6, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        Boolean isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(8, isTop ? 1L: 0L);
        }
 
        Boolean isDisturb = entity.getIsDisturb();
        if (isDisturb != null) {
            stmt.bindLong(9, isDisturb ? 1L: 0L);
        }
 
        String lastMessageContent = entity.getLastMessageContent();
        if (lastMessageContent != null) {
            stmt.bindString(10, lastMessageContent);
        }
 
        String lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindString(11, lastMessageId);
        }
 
        Long lastMessageCreateTime = entity.getLastMessageCreateTime();
        if (lastMessageCreateTime != null) {
            stmt.bindLong(12, lastMessageCreateTime);
        }
 
        String lastMessageNick = entity.getLastMessageNick();
        if (lastMessageNick != null) {
            stmt.bindString(13, lastMessageNick);
        }
 
        Integer lastMsgType = entity.getLastMsgType();
        if (lastMsgType != null) {
            stmt.bindLong(14, lastMsgType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // chatType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // targetId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nick
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isTop
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isDisturb
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lastMessageContent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lastMessageId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // lastMessageCreateTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lastMessageNick
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // lastMsgType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setChatType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSessionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNick(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsTop(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsDisturb(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setLastMessageContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastMessageId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLastMessageCreateTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setLastMessageNick(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLastMsgType(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Conversation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
